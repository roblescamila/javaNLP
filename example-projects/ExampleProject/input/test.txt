package interfas.mati.prado.hola.que.tal.boludo;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;

import org.mcavallo.opencloud.Cloud;
import org.mcavallo.opencloud.Tag;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.DefaultListModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JRadioButton;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SpinnerNumberModel;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JList;
import javax.swing.JScrollPane;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.JTree;

public class mati extends JFrame {

	private JPanel contentPane;
	private static Vector<String> comments;
	private static Vector<String> className;
	private static Vector<String> methodsName;
	private static Vector<String> realVariableName;
	private static Vector<String> formalVariableName;
	private static Vector<String> imports;
	private static Vector<String> packages;
	private static Vector<String> filterWords;
	private JTextField textField;


	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		Vector<String> aux = new Vector<String>();
		aux.add("mati");
		aux.add("mati");
		aux.add("mati");
		loadComments(aux);
		Vector<String> aux2 = new Vector<String>();
		aux2.add("cami");
		aux2.add("cami");
		aux2.add("cami");
		loadImports(aux2);
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					mati frame = new mati();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	public boolean isFilterWords(String aux)
	{
		return filterWords.contains(aux);
	}
	
	public static void clearVector()
	{
		 comments= new Vector<String>();
	className= new Vector<String>();
		 methodsName= new Vector<String>();
		realVariableName= new Vector<String>();
		 formalVariableName= new Vector<String>();
		imports= new Vector<String>();
		packages= new Vector<String>();
	}
	
	
	public static void loadComments(Vector<String> aux) {
		// quizas hay que cambiar todos por add
		comments = aux;
	}

	public static void loadClassname(Vector<String> aux) {
		className = aux;
	}

	public static void loadMethodsName(Vector<String> aux) {
		methodsName = aux;
	}

	public static void loadImports(Vector<String> aux) {
		imports = aux;
	}

	public static void loadPackage(Vector<String> aux) {
		packages = aux;
	}

	public static void loadRealVariableName(Vector<String> aux) {
		realVariableName = aux;
	}

	public static void loadFormalVariableName(Vector<String> aux) {
		formalVariableName = aux;
	}

	/**
	 * Create the frame.
	 * 
	 * @throws IOException
	 */
	public mati() throws IOException {

		final JFrame frame2 = new JFrame("cloud word");
		final JFrame frame3 = new JFrame("choice");
		JButton btnNewButton_1 = new JButton("Send");

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 903, 552);
		final Cloud cloud = new Cloud();
		JMenuBar menuBar = new JMenuBar();
		setJMenuBar(menuBar);
		final JFileChooser fc = new JFileChooser();
		fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		JMenu mnFile = new JMenu("File");
		menuBar.add(mnFile);

		JMenuItem mntmOpen = new JMenuItem("Open");

		mnFile.add(mntmOpen);

		JMenuItem mntmSave = new JMenuItem("Save");
		mnFile.add(mntmSave);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		final JPanel panel2 = new JPanel();
		JButton btnNewButton = new JButton("Words cloud");

		final JRadioButton commentsRadioButton = new JRadioButton("Comments", false);

		final JRadioButton classNameRadioButton = new JRadioButton("Class name", false);

		final JRadioButton methodsNameRadioButton = new JRadioButton("Methods name", false);

		final JRadioButton realVariableNameRadioButton = new JRadioButton("Real variable name", false);

		final JRadioButton formalVariableNameRadioButton = new JRadioButton("Formal variable name", false);

		final JRadioButton packageRadioButton = new JRadioButton("Package", false);

		final JRadioButton importsRadioButton = new JRadioButton("Imports", false);

		final JFrame frame = new JFrame("cloud");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		JScrollPane scrollPane = new JScrollPane();

		JLabel lblClassList = new JLabel("Class list");
		SpinnerNumberModel model = new SpinnerNumberModel(new Integer(0), // Dato
																			// visualizado
																			// al
																			// inicio
																			// en
																			// el
																			// spinner
				new Integer(0), // Límite inferior
				new Integer(1000), // Límite superior
				new Integer(1) // incremento-decremento
		);

		final JSpinner spinner = new JSpinner(model);

		JLabel lblMinWordCount = new JLabel("Min word count");

		JScrollPane scrollPane_1 = new JScrollPane();

		textField = new JTextField();
		textField.setColumns(10);

		JLabel lblFilterWords = new JLabel("Filter words");

		JLabel lblAddWordsTo = new JLabel("Add words to filter");
		
		//JTree tree = new JTree();
		final DefaultMutableTreeNode paquetes = new DefaultMutableTreeNode("Packages");
		final TreeModel packagesmodel = new DefaultTreeModel(paquetes);
		JTree tree = new JTree(packagesmodel);

		GroupLayout gl_contentPane = new GroupLayout(contentPane);
		gl_contentPane.setHorizontalGroup(
			gl_contentPane.createParallelGroup(Alignment.LEADING)
				.addGroup(Alignment.TRAILING, gl_contentPane.createSequentialGroup()
					.addContainerGap()
					.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
						.addComponent(methodsNameRadioButton)
						.addComponent(realVariableNameRadioButton)
						.addComponent(formalVariableNameRadioButton)
						.addComponent(packageRadioButton)
						.addComponent(importsRadioButton)
						.addComponent(classNameRadioButton)
						.addComponent(commentsRadioButton)
						.addGroup(gl_contentPane.createSequentialGroup()
							.addComponent(spinner, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(lblMinWordCount)))
					.addPreferredGap(ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING)
						.addGroup(gl_contentPane.createSequentialGroup()
							.addComponent(lblAddWordsTo)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
								.addComponent(scrollPane_1, GroupLayout.PREFERRED_SIZE, 144, GroupLayout.PREFERRED_SIZE)
								.addGroup(gl_contentPane.createSequentialGroup()
									.addComponent(textField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
									.addPreferredGap(ComponentPlacement.RELATED)
									.addComponent(btnNewButton_1, GroupLayout.PREFERRED_SIZE, 76, GroupLayout.PREFERRED_SIZE)))
							.addGap(19))
						.addGroup(gl_contentPane.createSequentialGroup()
							.addComponent(lblFilterWords)
							.addGap(101)))
					.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_contentPane.createSequentialGroup()
							.addComponent(tree, GroupLayout.PREFERRED_SIZE, 182, GroupLayout.PREFERRED_SIZE)
							.addContainerGap())
						.addGroup(Alignment.TRAILING, gl_contentPane.createSequentialGroup()
							.addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING)
								.addGroup(gl_contentPane.createSequentialGroup()
									.addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, 333, GroupLayout.PREFERRED_SIZE)
									.addGap(28))
								.addGroup(gl_contentPane.createSequentialGroup()
									.addComponent(lblClassList)
									.addGap(174))
								.addGroup(gl_contentPane.createSequentialGroup()
									.addComponent(btnNewButton)
									.addGap(19)))
							.addGap(19))))
		);
		gl_contentPane.setVerticalGroup(
			gl_contentPane.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPane.createSequentialGroup()
					.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_contentPane.createSequentialGroup()
							.addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE)
								.addComponent(commentsRadioButton)
								.addComponent(lblClassList))
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(classNameRadioButton)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(methodsNameRadioButton)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(realVariableNameRadioButton)
							.addPreferredGap(ComponentPlacement.UNRELATED)
							.addComponent(formalVariableNameRadioButton)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(packageRadioButton)
							.addPreferredGap(ComponentPlacement.UNRELATED)
							.addComponent(importsRadioButton)
							.addPreferredGap(ComponentPlacement.UNRELATED)
							.addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE)
								.addComponent(spinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								.addComponent(lblMinWordCount)))
						.addGroup(gl_contentPane.createSequentialGroup()
							.addContainerGap()
							.addComponent(lblFilterWords)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
								.addComponent(scrollPane_1, GroupLayout.PREFERRED_SIZE, 213, GroupLayout.PREFERRED_SIZE)
								.addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, 201, GroupLayout.PREFERRED_SIZE))))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE)
						.addComponent(btnNewButton)
						.addComponent(textField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(btnNewButton_1)
						.addComponent(lblAddWordsTo))
					.addGap(18)
					.addComponent(tree, GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE))
		);

		final JList wordsList = new JList();
		final DefaultListModel wordsModel = new DefaultListModel();
		wordsModel.addElement("get");
		wordsModel.addElement("set");
		wordsModel.addElement("java");
		wordsList.setModel(wordsModel);
		scrollPane_1.setViewportView(wordsList);

		final JList list = new JList();
		final DefaultListModel modelo = new DefaultListModel();
		scrollPane.setViewportView(list);
		contentPane.setLayout(gl_contentPane);

		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				int[] aux;
				aux = wordsList.getSelectedIndices();
				for (int a : aux) {
					String palabra = (String) wordsModel.getElementAt(a);
					System.out.println(palabra);
					filterWords.addElement(palabra); 
				}
				
				
//
//								
//				System.out.println("Mostrar cloud");
//				System.out.print(comments.size());
//				if (commentsRadioButton.isSelected()) {
//					
//
//					for (int i = 0; i < comments.size(); i++) {
//
//						cloud.addTag(comments.elementAt(i));
//					}
//				}
//				if (packageRadioButton.isSelected()) {
//					System.out.println("entre al if package");
//					for (int i = 0; i < packages.size(); i++) {
//						cloud.addTag(packages.elementAt(i));
//					}
//				}
//				if (importsRadioButton.isSelected()) {
//					for (int i = 0; i < imports.size(); i++) {
//						cloud.addTag(imports.elementAt(i));
//					}
//				}
//				if (classNameRadioButton.isSelected()) {
//					for (int i = 0; i < className.size(); i++) {
//						cloud.addTag(className.elementAt(i));
//					}
//				}
//				if (methodsNameRadioButton.isSelected()) {
//					for (int i = 0; i < methodsName.size(); i++) {
//						cloud.addTag(methodsName.elementAt(i));
//					}
//				}
//				if (realVariableNameRadioButton.isSelected()) {
//					for (int i = 0; i < realVariableName.size(); i++) {
//						cloud.addTag(realVariableName.elementAt(i));
//					}
//				}
//				if (formalVariableNameRadioButton.isSelected()) {
//					for (int i = 0; i < formalVariableName.size(); i++) {
//						cloud.addTag(formalVariableName.elementAt(i));
//					}
//				}

				System.out.println("empiezo a crear la cloud");
				panel2.removeAll();
				panel2.repaint();
				for (Tag tag : cloud.tags()) {

					if (tag.getScoreInt() > (int) (((SpinnerNumberModel) spinner.getModel()).getNumber())) {
						System.out.println("entro al for de los tag");
						final JLabel label = new JLabel(tag.getName());
						label.setOpaque(false);
						label.setFont(label.getFont().deriveFont((float) tag.getWeight() * 20));
						panel2.add(label);
					}
				}
				// contentPane.add(panel);

				frame2.getContentPane().add(panel2);
				frame2.setSize(400, 400);
				frame2.setVisible(true);
				
			clearVector();
		//	cloud.clear(); //creo que es asi hay que pensarlo bien
			
			}
		
		});
		mntmOpen.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				int seleccion = fc.showOpenDialog(frame3);
				// fc.showOpenDialog(contentPane);
				 DefaultMutableTreeNode padre;
				// Si el usuario, pincha en aceptar
				fc.setMultiSelectionEnabled(true);
				if (seleccion == JFileChooser.APPROVE_OPTION) {

					// Seleccionamos el fichero
		
					File a = fc.getSelectedFile();
					File[] a2 = a.listFiles();
                String name= a.getName();
                System.out.println(name);
                 padre = new DefaultMutableTreeNode(name);
                 ((DefaultTreeModel) packagesmodel).insertNodeInto(padre,paquetes,0);
		             Vector<File> ficheros =new Vector<File>();
					for (File archivo:a2)
					{
						ficheros.add(archivo);
					}
				
					// Ecribe la ruta del fichero seleccionado en el campo de
					// texto

					// textField.setText(fichero.getAbsolutePath());
					
					for (int i=0; i<ficheros.size();i++ ) {
											
						File fichero = ficheros.elementAt(i);
						
						if (!fichero.isDirectory()) {
							modelo.addElement(fichero.getName());
							list.setModel(modelo);
							 DefaultMutableTreeNode hijo = new DefaultMutableTreeNode(fichero.getName());
							 ((DefaultTreeModel) packagesmodel).insertNodeInto(hijo,padre,0);
						
						
							try (FileReader fr = new FileReader(fichero)) {
								String cadena = "";
							
								int valor = fr.read();
								while (valor != -1) {
								
									cadena = cadena + (char) valor;
									valor = fr.read();
								}
								System.out.println(cadena);
							} catch (IOException e1) {
								e1.printStackTrace();
							}
						} else {
						 name=fichero.getName();
						 System.out.println( name );
						
						 DefaultMutableTreeNode padre2 = new DefaultMutableTreeNode(name);
		                 ((DefaultTreeModel) packagesmodel).insertNodeInto(padre2,padre,0);	
		                 
						 File[] auxiliar = fichero.listFiles();
							for (File aux : auxiliar) {
																
								ficheros.addElement(aux); 
							
							}
							padre=padre2;

						}
					}
				}
			}
		});
		

		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				wordsModel.addElement(textField.getText());
				wordsList.setModel(wordsModel);
				textField.setText("");
			}
		});



	}
}
